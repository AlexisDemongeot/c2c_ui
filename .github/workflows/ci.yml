name: Continuous integration

on:
  push:
    branches:
      - "**"
    tags:
      - "**"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Cache node modules
        uses: actions/cache@v1
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: npm install, lint and build
        run: |
          npm ci
          npm run lint:no-fix
          npm run build
        env:
          CI: ${{ true }}
      - name: Build and publish Docker image
        if: "contains(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master'"
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: c2corg/c2c_ui
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build for github pages
        run: npm run build:github
      - name: Upload artifact for github pages
        uses: actions/upload-artifact@v2
        with:
          name: github-pages
          path: dist/*

  github-pages:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get the branch
        id: get_branch
        run: echo ::set-output name=BRANCH::${GITHUB_REF/refs\/heads\//}
      - name: Create clean branch name
        id: clean_branch
        run: echo ::set-output name=CLEAN_BRANCH::${BRANCH/\//-}
        env:
          BRANCH: ${{ steps.get_branch.outputs.BRANCH }}
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ref: gh-pages
      - name: Remove current branch files
        run: rm -rf ${{ steps.clean_branch.outputs.CLEAN_BRANCH }}
      - name: Retrieve github pages artifact
        uses: actions/download-artifact@v2
        with:
          name: github-pages
          path: ${{ steps.clean_branch.outputs.CLEAN_BRANCH }}
      - name: Commit files
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git add .
          git commit -m "Deploy ${{ steps.get_branch.outputs.BRANCH }} branch"
      - name: Push changes
        uses: ad-m/github-push-action@v0.5.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: gh-pages

  create-release:
    needs: build
    if: "contains(github.ref, 'refs/tags/v*')"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Generate changelog
        id: changelog
        uses: heinrichreimer/github-changelog-generator-action@v2.1.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issues: false
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false

  push-i18n:
    needs: build
    if: "github.ref == 'refs/heads/master'"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Push translations to Transifex
        run: |
          echo "::add-mask::$TOKEN"
          curl -L --user api:"$TOKEN" -F file="@src/translations/po/c2corg_ui-client.pot" -X PUT "https://www.transifex.com/api/2/project/c2corg_ui/resource/main/content/"
        env:
          TOKEN: ${{ secrets.TRANSIFEX_TOKEN }}
